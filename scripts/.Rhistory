#########################################
# get current working directory
dir <- "/home/mali/study/Project/CAMSC_Coffman/results/salmon"
# list files in cwd
list.files(dir)
###########################################
#  Begin: Violin Plots of Samples
###########################################
# Log2 + 1
melt <- melt(counts(dds))
melt$value <- log2(melt$value + 1)
# split the data based on the sample name
melt <- split(melt, melt$X2)
# loop over results, plotting 'division' number of samples
# per plot
if (length(melt) <= division) {
k <- length(melt)
} else {
k <- division
}
j <- 1
while (j <= ceiling(nrow(samples) / k)) {
start <- ((j - 1) * k) + 1
end <- ((j - 1) * k) + k
range <- start:end
tmp_melt <- melt[range]
tmp_melt <- do.call(rbind.data.frame, tmp_melt)
tmp_melt <- merge(tmp_melt, samples, by.x = "X2", by.y = "shortname")
p <- ggplot(tmp_melt, aes(X2, value, fill = X2)) +
geom_violin(trim=FALSE) +
stat_summary(fun.data=data_summary) +
labs(title="", y="log2(count + 1)", x="samples") +
theme_minimal() + theme(legend.position = "none") +
scale_fill_manual(values=samples[start:end, "data_color"])
print(p)
j <- j + 1
}
###########################################
#  Begin: Violin Plots of Samples
###########################################
# Log2 + 1
melt <- melt(counts(dds))
melt$value <- log2(melt$value + 1)
# split the data based on the sample name
melt <- split(melt, melt$X2)
# loop over results, plotting 'division' number of samples
# per plot
if (length(melt) <= division) {
k <- length(melt)
} else {
k <- division
}
j <- 1
while (j < ceiling(nrow(samples) / k)) {
start <- ((j - 1) * k) + 1
end <- ((j - 1) * k) + k
range <- start:end
tmp_melt <- melt[range]
tmp_melt <- do.call(rbind.data.frame, tmp_melt)
tmp_melt <- merge(tmp_melt, samples, by.x = "X2", by.y = "shortname")
p <- ggplot(tmp_melt, aes(X2, value, fill = X2)) +
geom_violin(trim=FALSE) +
stat_summary(fun.data=data_summary) +
labs(title="", y="log2(count + 1)", x="samples") +
theme_minimal() + theme(legend.position = "none") +
scale_fill_manual(values=samples[start:end, "data_color"])
print(p)
j <- j + 1
}
start <- ((j - 1) * k) + 1
end <- ((j - 1) * k) + k
range <- start:end
tmp_melt <- melt[range]
tmp_melt
###########################################
#  Begin: Violin Plots of Samples
###########################################
# Log2 + 1
melt <- melt(counts(dds))
melt$value <- log2(melt$value + 1)
# split the data based on the sample name
melt <- split(melt, melt$X2)
# loop over results, plotting 'division' number of samples
# per plot
if (length(melt) <= division) {
k <- length(melt)
} else {
k <- division
}
j <- 1
while (j <= ceiling(nrow(samples) / k)) {
start <- ((j - 1) * k) + 1
end <- ((j - 1) * k) + k
range <- start:end
tmp_melt <- melt[range]
if (is.na.data.frame(tmp_melt)) {
tmp_melt <- do.call(rbind.data.frame, tmp_melt)
tmp_melt <- merge(tmp_melt, samples, by.x = "X2", by.y = "shortname")
p <- ggplot(tmp_melt, aes(X2, value, fill = X2)) +
geom_violin(trim=FALSE) +
stat_summary(fun.data=data_summary) +
labs(title="", y="log2(count + 1)", x="samples") +
theme_minimal() + theme(legend.position = "none") +
scale_fill_manual(values=samples[start:end, "data_color"])
print(p)
}
j <- j + 1
}
###########################################
#  Begin: Violin Plots of Samples
###########################################
# Log2 + 1
melt <- melt(counts(dds))
melt$value <- log2(melt$value + 1)
# split the data based on the sample name
melt <- split(melt, melt$X2)
# loop over results, plotting 'division' number of samples
# per plot
if (length(melt) <= division) {
k <- length(melt)
} else {
k <- division
}
j <- 1
while (j <= ceiling(nrow(samples) / k)) {
start <- ((j - 1) * k) + 1
end <- ((j - 1) * k) + k
range <- start:end
tmp_melt <- melt[range]
if (!is.na.data.frame(tmp_melt)) {
tmp_melt <- do.call(rbind.data.frame, tmp_melt)
tmp_melt <- merge(tmp_melt, samples, by.x = "X2", by.y = "shortname")
p <- ggplot(tmp_melt, aes(X2, value, fill = X2)) +
geom_violin(trim=FALSE) +
stat_summary(fun.data=data_summary) +
labs(title="", y="log2(count + 1)", x="samples") +
theme_minimal() + theme(legend.position = "none") +
scale_fill_manual(values=samples[start:end, "data_color"])
print(p)
}
j <- j + 1
}
is.na.data.frame(tmp_melt)
is.na(tmp_melt)
any(is.na(tmp_melt))
###########################################
#  Begin: Violin Plots of Samples
###########################################
# Log2 + 1
melt <- melt(counts(dds))
melt$value <- log2(melt$value + 1)
# split the data based on the sample name
melt <- split(melt, melt$X2)
# loop over results, plotting 'division' number of samples
# per plot
if (length(melt) <= division) {
k <- length(melt)
} else {
k <- division
}
j <- 1
while (j <= ceiling(nrow(samples) / k)) {
start <- ((j - 1) * k) + 1
end <- ((j - 1) * k) + k
range <- start:end
tmp_melt <- melt[range]
if (!any(is.na(tmp_melt))) {
tmp_melt <- do.call(rbind.data.frame, tmp_melt)
tmp_melt <- merge(tmp_melt, samples, by.x = "X2", by.y = "shortname")
p <- ggplot(tmp_melt, aes(X2, value, fill = X2)) +
geom_violin(trim=FALSE) +
stat_summary(fun.data=data_summary) +
labs(title="", y="log2(count + 1)", x="samples") +
theme_minimal() + theme(legend.position = "none") +
scale_fill_manual(values=samples[start:end, "data_color"])
print(p)
}
j <- j + 1
}
tmp_melt
any(is.na(tmp_melt))
dim(tmp_melt)
dim(tmp_melt)[[1]]
###########################################
#  Begin: Violin Plots of Samples
###########################################
# Log2 + 1
melt <- melt(counts(dds))
melt$value <- log2(melt$value + 1)
# split the data based on the sample name
melt <- split(melt, melt$X2)
# loop over results, plotting 'division' number of samples
# per plot
if (length(melt) <= division) {
k <- length(melt)
} else {
k <- division
}
j <- 1
while (j <= ceiling(nrow(samples) / k)) {
start <- ((j - 1) * k) + 1
end <- ((j - 1) * k) + k
range <- start:end
tmp_melt <- melt[range]
if (dim(tmp_melt)[[1]] > 0) {
tmp_melt <- do.call(rbind.data.frame, tmp_melt)
tmp_melt <- merge(tmp_melt, samples, by.x = "X2", by.y = "shortname")
p <- ggplot(tmp_melt, aes(X2, value, fill = X2)) +
geom_violin(trim=FALSE) +
stat_summary(fun.data=data_summary) +
labs(title="", y="log2(count + 1)", x="samples") +
theme_minimal() + theme(legend.position = "none") +
scale_fill_manual(values=samples[start:end, "data_color"])
print(p)
}
j <- j + 1
}
dim(tmp_melt)[[1]]
dim(tmp_melt)
length(tmp_melt[1])
tmp_melt[1]
tmp_melt[[1]]
is.na(tmp_melt)
length(melt)
nrow(melt)
melt
length(melt)
end
###########################################
#  Begin: Violin Plots of Samples
###########################################
# Log2 + 1
melt <- melt(counts(dds))
melt$value <- log2(melt$value + 1)
# split the data based on the sample name
melt <- split(melt, melt$X2)
# loop over results, plotting 'division' number of samples
# per plot
if (length(melt) <= division) {
k <- length(melt)
} else {
k <- division
}
j <- 1
while (j <= ceiling(nrow(samples) / k)) {
start <- ((j - 1) * k) + 1
end <- ((j - 1) * k) + k
if(end <= length(melt)) {}
range <- start:end
tmp_melt <- melt[range]
length(melt)
tmp_melt <- do.call(rbind.data.frame, tmp_melt)
tmp_melt <- merge(tmp_melt, samples, by.x = "X2", by.y = "shortname")
p <- ggplot(tmp_melt, aes(X2, value, fill = X2)) +
geom_violin(trim=FALSE) +
stat_summary(fun.data=data_summary) +
labs(title="", y="log2(count + 1)", x="samples") +
theme_minimal() + theme(legend.position = "none") +
scale_fill_manual(values=samples[start:end, "data_color"])
print(p)
}
length(melt)
###########################################
#  Begin: Violin Plots of Samples
###########################################
# Log2 + 1
melt <- melt(counts(dds))
melt$value <- log2(melt$value + 1)
# split the data based on the sample name
melt <- split(melt, melt$X2)
# loop over results, plotting 'division' number of samples
# per plot
if (length(melt) <= division) {
k <- length(melt)
} else {
k <- division
}
j <- 1
while (j <= ceiling(nrow(samples) / k)) {
start <- ((j - 1) * k) + 1
end <- ((j - 1) * k) + k
if(end <= length(melt)) {
range <- start:end
tmp_melt <- melt[range]
length(melt)
tmp_melt <- do.call(rbind.data.frame, tmp_melt)
tmp_melt <- merge(tmp_melt, samples, by.x = "X2", by.y = "shortname")
p <- ggplot(tmp_melt, aes(X2, value, fill = X2)) +
geom_violin(trim=FALSE) +
stat_summary(fun.data=data_summary) +
labs(title="", y="log2(count + 1)", x="samples") +
theme_minimal() + theme(legend.position = "none") +
scale_fill_manual(values=samples[start:end, "data_color"])
print(p)
}
j <- j + 1
}
###########################################
#  End: Violin Plots of Samples
###########################################
library(knitr)
knit_hooks$set(crop = knitr::hook_pdfcrop)
opts_chunk$set(echo=FALSE, results='hide', message=FALSE, warning=FALSE, fig.align="center", fig.width=8, fig.height=8)
#########################################
# Template R script for running a simple
# DESeQ2-based gene expression EDA
# analysis, using the output from Salmon
#########################################
library(tximport)
library(DESeq2)
library(biomaRt)
library(tidyverse)
library(gplots)
library(RColorBrewer)
library(DT)
library(reshape)
#########################################
# Begin: Configuration setting
#########################################
# sample design file name
design_file_name <- "/home/mali/study/Project/CAMSC_Coffman/results/salmon/samples.txt"
# define species being used
species <- "Homo Sapiens"
#species <- "Mus Musculus"
#species <- "Danio Rerio"
# set number of divisions to break samples and probes into
# for plotting violin plots
division <- 2
#########################################
# End: Configuration setting
#########################################
# get current working directory
dir <- "/home/mali/study/Project/CAMSC_Coffman/results/salmon"
# list files in cwd
list.files(dir)
# define which biomart object to use
# GRCh37 (Hsapiens.v75) or mouse GRCm38 (Mmusculus.v79))
#define_reference_genome = NULL
mart <- NULL
if (species == 'Homo Sapiens') {
#define_reference_genome <- "EnsDb.Hsapiens.v75"
mart <- biomaRt::useMart(biomart = "ensembl",
dataset = "hsapiens_gene_ensembl",
host = "https://grch37.ensembl.org")
} else if (species == 'Mus Musculus') {
#define_reference_genome <- "EnsDb.Mmusculus.v79"
mart <- biomaRt::useMart(biomart = "ensembl",
dataset = "mmusculus_gene_ensembl",
host = "https://nov2020.archive.ensembl.org")
}  else if (species == 'Danio Rerio') {
mart <- biomaRt::useDataset(dataset = "drerio_gene_ensembl",
mart = useMart("ENSEMBL_MART_ENSEMBL",
host = "https://may2015.archive.ensembl.org"))
} else {
stop("A valid species was not specified.")
}
# Since there is no such an EnsDb database for Danio Rerio(Zebrafish),
# when skip this while it's Danio Rerio (By Li Ma, 05/18/2023)
#######################Start################################
#if (species != 'Danio Rerio') {
#  library(define_reference_genome, character.only = TRUE)
#}
#######################End################################
# helper function for violin plots to calculate
# various stats
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
########################################
# Begin: EDA
########################################
# read in sample design file and conditions for this
# analysis
samples <- read.table(file.path(design_file_name), header = TRUE)
display_study_design <- as.data.frame(samples)
colnames(display_study_design)[1] <- "id"
DT::datatable(display_study_design)
# create list of files to be imported
files <- file.path(dir, samples$mpps_id, "quant.sf")
names(files) <- samples$shortname
# Since there this no EnsDb for Danio Rerio, we are going to building the txi
# from scratch using biomaRt (By Li Ma 05/18/2023)
####################Start##############################
tx2gene <- getBM(
attributes = c("ensembl_transcript_id", "ensembl_gene_id"),
#filters = "ensembl_gene_id",
mart = mart)
#anns <- anns[match(nm, anns[, 1]), ]
colnames(tx2gene) <- c("tx_id", "gene_id")
#df <- add_column(df, "Gene Symbol" = anns[,"Gene Symbol"], .after = "ID")
#if (species != 'Danio Rerio') {
# define shortcut to reference genome ensembldb
#  edb <- eval(as.name(define_reference_genome))
#  txdf <- transcripts(edb, return.type="DataFrame")
#  tx2gene <- as.data.frame(txdf[,c("tx_id", "gene_id")])
#}
####################End################################
txi <- tximport(files, type = "salmon", tx2gene = tx2gene, ignoreTxVersion = TRUE)
# create DESeqDataSet object from tximport object, and
# phenotype data
dds <- DESeqDataSetFromTximport(txi,
colData = samples,
design = ~ 1)
# output number of imported rows
nrow(dds)
# run DESeq
dds <- DESeq(dds)
nrow(samples)
ceiling(nrow(samples) / k)
# Log2 + 1
melt <- melt(counts(dds))
melt$value <- log2(melt$value + 1)
# split the data based on the sample name
melt <- split(melt, melt$X2)
# loop over results, plotting 'division' number of samples
# per plot
if (length(melt) <= division) {
k <- length(melt)
} else {
k <- division
}
ceiling(nrow(samples) / k)
nrow(samples)
###########################################
#  Begin: Violin Plots of Samples
###########################################
# Log2 + 1
melt <- melt(counts(dds))
melt$value <- log2(melt$value + 1)
# split the data based on the sample name
melt <- split(melt, melt$X2)
# loop over results, plotting 'division' number of samples
# per plot
if (length(melt) <= division) {
k <- length(melt)
} else {
k <- division
}
j <- 1
while (j <= ceiling(14 / k)) {
start <- ((j - 1) * k) + 1
end <- ((j - 1) * k) + k
if(end <= length(melt)) {
range <- start:end
tmp_melt <- melt[range]
length(melt)
tmp_melt <- do.call(rbind.data.frame, tmp_melt)
tmp_melt <- merge(tmp_melt, samples, by.x = "X2", by.y = "shortname")
p <- ggplot(tmp_melt, aes(X2, value, fill = X2)) +
geom_violin(trim=FALSE) +
stat_summary(fun.data=data_summary) +
labs(title="", y="log2(count + 1)", x="samples") +
theme_minimal() + theme(legend.position = "none") +
scale_fill_manual(values=samples[start:end, "data_color"])
print(p)
}
j <- j + 1
}
###########################################
#  End: Violin Plots of Samples
###########################################
txi
dds
library(knitr)
knit_hooks$set(crop = knitr::hook_pdfcrop)
opts_chunk$set(echo=FALSE, results='hide', message=FALSE, warning=FALSE, fig.align="center", fig.width=8, fig.height=8)
setwd("~/study/Project/CAMSC_Coffman/scripts")
library(tximport)
library(limma)
library(biomaRt)
library(tidyverse)
library(gplots)
library(RColorBrewer)
library(DT)
library(reshape)
counts(dds)
txi
#########################################
# Begin: Configuration setting
#########################################
# sample design file name
design_file_name <- "/home/mali/study/Project/CAMSC_Coffman/results/salmon/samples.txt"
# define species being used
species <- "Homo Sapiens"
# get current working directory
dir <- "/home/mali/study/Project/CAMSC_Coffman/results/salmon"
# list files in cwd
list.files(dir)
# define which biomart object to use
# GRCh37 (Hsapiens.v75) or mouse GRCm38 (Mmusculus.v79))
#define_reference_genome = NULL
mart <- NULL
#define_reference_genome <- "EnsDb.Hsapiens.v75"
mart <- biomaRt::useMart(biomart = "ensembl",
dataset = "hsapiens_gene_ensembl",
host = "https://grch37.ensembl.org")
# read in sample design file and conditions for this
# analysis
samples <- read.table(file.path(design_file_name), header = TRUE)
file.path(design_file_name)
# read in sample design file and conditions for this
# analysis
samples <- read.table(file.path(design_file_name), header = TRUE)
library(knitr)
knit_hooks$set(crop = knitr::hook_pdfcrop)
opts_chunk$set(echo=FALSE, results='hide', message=FALSE, warning=FALSE, fig.align="center", fig.width=8, fig.height=8)
library(knitr)
knit_hooks$set(crop = knitr::hook_pdfcrop)
opts_chunk$set(echo=FALSE, results='hide', message=FALSE, warning=FALSE, fig.align="center", fig.width=8, fig.height=8)
